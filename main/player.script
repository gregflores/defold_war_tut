local function play_animation(self, animation)
	if self.current_animation ~= animation then
		self.current_animation = animation
		sprite.play_flipbook("#sprite", animation)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")

	self.moving = false
	self.firing = false

	self.current_animation = nil
	
	self.input = vmath.vector3()
	self.dir = vmath.vector3(0.7, 0.7, 0)
	self.speed = 150
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function update_animation(self)
	if self.moving == false then
	
		if self.dir.x == 1 then
			play_animation(self,  hash("idle-right"))
		elseif self.dir.x == -1 then
			play_animation(self,  hash("idle-left"))
		elseif self.dir.y == -1 then
			play_animation(self,  hash("idle-down"))
		elseif self.dir.y == 1 then
			play_animation(self,  hash("idle-up"))
		elseif self.dir.x > 0 and self.dir.y > 0 then
			play_animation(self,  hash("idle-up-right"))
		elseif self.dir.x < 0 and self.dir.y > 0 then
			play_animation(self,  hash("idle-up-left"))
		elseif self.dir.x > 0 and self.dir.y < 0 then
			play_animation(self,  hash("idle-down-right"))
		elseif self.dir.x < 0 and self.dir.y < 0 then
			play_animation(self,  hash("idle-down-left"))
		end
	end
	if self.moving == true then
		if self.dir.x == 1 then
			play_animation(self,  hash("player-right"))
		elseif self.dir.x == -1 then
			play_animation(self,  hash("player-left"))
		elseif self.dir.y == -1 then
			play_animation(self,  hash("player-down"))
		elseif self.dir.y == 1 then
			play_animation(self,  hash("player-up"))
		elseif self.dir.x > 0 and self.dir.y > 0 then
			play_animation(self,  hash("player-up-right"))
		elseif self.dir.x < 0 and self.dir.y > 0 then
			play_animation(self,  hash("player-up-left"))
		elseif self.dir.x > 0 and self.dir.y < 0 then
			play_animation(self,  hash("player-down-right"))
		elseif self.dir.x < 0 and self.dir.y < 0 then
			play_animation(self,  hash("player-down-left"))
		end
	end
end

function update(self, dt)
	update_animation(self)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end

	if self.firing then
		local angle = math.atan2(self.dir.y, self.dir.x)
		local rot = vmath.quat_rotation_z(angle)
		local props = { dir = self.dir }
		factory.create("#rocketfactory", nil, rot, props)
	end
	
	self.input = vmath.vector3()
	
	self.moving = false
	self.firing = false
end

function on_input(self, action_id, action)
	if action_id == hash("up") then
		self.input.y = 1
	elseif action_id == hash("down") then
		self.input.y = -1
	elseif action_id == hash("left") then
		self.input.x = -1
	elseif action_id == hash("right") then
		self.input.x = 1
	elseif action_id == hash("fire") and action.pressed then
		self.firing = true
	end
	
	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
